package com.lanou3g;

public class Radix反码 {
		public static void main(String[] args) {
			System.out.println();
			/*
			 *反码是数值存储的一种，多应用于系统环境设置，
			 *如linux平台的目录和文件的默认权限的设置umask，
			 *就是使用反码原理。
			 *在计算机内，定点数有3种表示法：原码、反码和补码。
			 */
			/*
			 * 反码：正数：正数的反码与原码相同。负数：负数的反码，符号位为“1”，数值部分按位取反。例如： 符号位 数值位
				[+7]反= 0 0000111 B
				[-7]反= 1 1111000 B
				注意：1000 0000 B 不等于0 而是 -128
				（右图）
				+127 +1 = -128
				即 0111 1111 B+1 = 1000 0000 B
				也就是发生了 byte值溢出
				8位二进制反码的表示范围：-127～+127
				为什么 -128 的二进制会是1000 0000；
				1000 0000 (原) = 1111 1111(反)
				那么问题来了： 64+32+16+8+4+2+1 = 127 为什么会有128呢？
				原来 负数 反码是需要补码的，也就是在最后得出的结果上 +1
				注意：计算机中只有 +0 而不存在 -0的说法，因为-0是完全没有意义的存在，
				即：只有 0000 0000 = +0
				而没有 1000 0000 = -0
				1000 0000的真实身份是 -128 （右图）	
			 */
				
				
		}
}
